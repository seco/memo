웹 프로그래밍
 - 동적인 데이터도 보여준다. 
 - 동적인 데이터를 보여주기 위해서 프로그래밍을 해야한다. 
 - 파이썬 노드, 자바스크립트, 스칼라, 루비온레일즈, C언어로도 가능합니다.
 - 자바라는 언어를 사용해서 웹프로그래밍을 하려면 준비해야할게 필요하다.
 - WAS(Web Application Server) 
 - JEE(자바 엔터프라이즈 에디션) : 컴퓨터 여러대에서 사용할 수 있는 환경이다.
 - 엔터프라이즈 자체가 분산 환경이라는 것을 뜻한다.
 - JEE 스펙 중에서 원격에 있는 DB를 이용하는 JDBC도 JEE이다. 
 - Servlet, JSP도 있다. 

이런 스펙을 처리할 수 있는 프로그램이 WAS라는 프로그램.
tomcat을 사용합니다.

하나의 와스에 웹 어플리케이션이 여러개가  설치(deploy)가 될 수 있다. 
각각의 웹 어플리케이션을 구분해주는 값이 있다. 
그 값을 context root, context path라고 한다. 

하나의 와스 안에 웹어플리케이션이 설치되어야하는데 우리가 알아야 할 것이 있다.
1. WAS를 설치할 수 있어야함
2. 웹어플리케이션을 만들 수 있어야함.
 - 웹어플리케이션의 구조를 알아야함
3. Deploy 하는 방법을 알아야함
 - 내 컴퓨터에만 설치하는 것은 반쪽짜리이다. 
 - 서버(물리적 서버)에 운영해봐야한다. 

https://www.slideshare.net/cybaek/201403

라운드로빈 방식
L4 스위치 
HAProxy 같은 것을 설치해서 
인프라 담당자가 설치 및 운영
그래서 클라우드를 많이 사용한다.
AWS 같은 것을 사용

DevOps : 개발도 하고 운영도 할 수 있는 사람을 뽑으려고 함.

개발자가 알아야할게 많아지고 있다. 
Name Server를 등록만해도 roundRobin 방식으로 등록이된다.
nslookup www.naver.com

tcp/ip 프로토콜에서 패킷 프로그래밍에서 

좋은 프로그램을 만들려면 프로그램만 잘해서는 안된다. 
인프라에 대한 이해가 있어야한다.
좋은 회사에 간다는건 이런걸 경험할 수 있다. 
대용량 웹어플리케이션을 만드냐 아니냐.
쇼핑몰도 100명오는 곳이나 만명오는 곳이나 겉모습은 똑같다.

Web Application의 구조

 ㅣ
 +---WEB-INF 	- web.xml (서블릿 스펙 3.0 이상에서는 없어도 된다.)
 ㅣ		- lib 폴더 (각종 jar 파일)
 ㅣ		- classes 폴더 (패키지 폴더, 각종 클래스파일)
 ㅣ		- 여러가지 폴더, 파일(jsp WEB-INF 이후에 놓여지는 것을 추천한다.)
 +--- 여러가지 폴더, 파일(jsp가 있을 수 있는데 추천하지 않는다.)
	js, css, html, images와 같은 정적인 파일들이 있을 수 있다. 

위의 내용들을 jar라는 명령으로 압축을하여 확장자가 war이라는 파일을 만든다.
해당 파일이 WAS에 deploy(배치)된다.

추천 검색어
war 파일의 구조, web application의 구조


Intellij로 개발(maven 이용)

--src 	-main 	-java
		-resources
	-test	-java
		-resources
 -webapp 폴더 - html, css, WEB-INF 등 

--------> 웹 어플리케이션을 실행하면 위의 구조로 변경이 되면서 실행됨
	웹 어플리케이션은 WAS에서 실행된다. 
--------> 웹 어플리케이션 실행(IDE에서 사용할 WAS를 설정.) --> 

* WAS runtime 설정 - 내가만든 웹 어플리케이션을 실행해줄 WAS를 설정.

검색어 자체가 intellij 톰켓 설정 이런식으로 설정해야한다.

-----
tomcat.apache.org

상식 : tar 라는 명령은 디렉토리 이하를 하나의 파일로 만들어준다.
       gzip이라는 명령은 압축


tomcat8 버전을 다운로드하여 압축을 해제한다.

tomcat 8
	+
 -- bin 실행파일 startup.bat (sh), 종료파일 shutdown.bat (sh)
 -- conf : tomcat 설정파일이 있다.
 -- webapps : 웹애플리케이션들이 있는 경로. ROOT라는 폴더의 context path는 ""이다.
		http://localhost:8080/{contextPath}/index.jsp를 확인한다.
		http://localhost:8080/{contextPath}/tomcat.gif



textfile editor
code.visualstudio.com

bin 디렉토리로 이동해서 
./startup.sh 

startup.bat 파일의 마지막 줄의 start -> run 으로 변경
start는 새창이 뜨면서 실행이 된다. 에러를 볼수가 없다.
run으로 실행하면 현재창에서 뜬다. 

톰캣을 인텔리제이에서 실행한다.

인텔리제이를 실행한다.Ultimate버전.

group id : my.examples.web
artifact id : firstweb

pom.xml 파일에 다음과 같은 의존성을 추가한다.
서블릿과 jsp와 관련된 라이브러리는 tomcat이 이미 가지고 이싿. 
provided는 개발할때는 쓰지만 배포할때는 쓰지말라는 이야기이다.
<scope>provided</scope> 

패키징은 war 파일이 되기 위해서 다음과 같이 설정한다.

톰캣은 8버전 이상을 지원해줘야한다.

@ 표시가 붙어있는 것은 자바에서는 annotation이라고 한다.
@WebServlet

클래스를 TodayServlet만들었는데 생성하지 않았다.

WAS가 실행이 되어있고 

WAS의 context path 
/WEB-INF/web.xml 파일이 있었다. 
index.html도 있었다. 

가장먼저 web.xml 파일을 읽어들인다.
이 web.xml 파일을 보니 얘는 서블릿 스펙 3.1 스펙을 사용한다는 것을 본다.
그리고 클래스에 @WebServlet이 붙은 애들을 다 찾는다.
그리고 그 뒤에 PATH("/today")를 찾는다.
그걸 다 찾아서 WAS가 new 연산자를 사용해서 PATH를 인스턴스로 만들어준다.

각각의 서블릿들은 

WAS가 실행해서 인스턴스를 생성할 수 있게 어노테이션을 사용한다.

TodayServlet이라는 클래스를 만들었다. 

내가 클래스를 만들었지만 다른애가 클래스를 만들어서 생성한다. 
이런 개념이  IoC(제어의 역전)이라고 한다. 예전에는 내가 만든 객체를 생성해서 호출했었다.
현대의 프로그래밍은 내가 만든걸 다른애가 내가만든 메서드를 호출한다.

지금 이런 개념들이 Servlet Life Cycle 이라고 한다.
어떤 순서로 뭘 어떻게 호출하는지를 알아야한다. 암기해야한다.

이런 개념을 자연스럽게 받아들이면 쉬워지는데 이해하려고하면 어려워진다. 

오늘 배운 내용을 잘 정리해도 오늘은 성공이다. 

--------------------
브라우저는 항상 접속이 되어야한다. 
그리고 요청정보를 보낸다. 

정해놓은 것을 스펙이라고 한다. 서블릿 스펙, HTTP 스펙



